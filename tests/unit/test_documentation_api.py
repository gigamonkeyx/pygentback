"""
Test script for documentation API endpoints

This script tests the new persistent documentation endpoints to ensure
they work correctly with user authentication and database storage.
"""

import asyncio
import sys
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.config.settings import Settings
from src.database.connection import init_sync_database, get_sync_db_session
from src.database.models import User
from src.services.document_service import DocumentService
import uuid


async def test_documentation_endpoints():
    """Test the documentation API endpoints"""
    
    print("🧪 Testing Documentation API Endpoints")
    print("=" * 50)
    
    try:        # Initialize settings and sync database
        settings = Settings()
        init_sync_database(settings)
        
        # Create database tables
        from src.database.models import Base
        from src.database.connection import sync_engine
        Base.metadata.create_all(bind=sync_engine)
        
        print("✅ Database initialized")
          # Create a test user
        test_user_id = str(uuid.uuid4())
        test_email = "test.docs@example.com"
        
        with get_sync_db_session() as session:
            # Check if user already exists
            existing_user = session.query(User).filter(User.email == test_email).first()
            if existing_user:
                test_user = existing_user
                print(f"✅ Using existing test user: {test_email}")
            else:                # Create new test user
                test_user = User(
                    id=test_user_id,
                    username="test_docs_user",
                    email=test_email,
                    is_active=True,
                    oauth_providers=["test"]
                )
                session.add(test_user)
                session.commit()
                session.refresh(test_user)
                print(f"✅ Created test user: {test_email}")
        
        # Test DocumentService
        doc_service = DocumentService()
        
        # Test 1: Create a documentation file
        print("\n📝 Test 1: Creating documentation file...")
        
        doc = doc_service.create_documentation_file(
            user_id=test_user.id,
            title="Test Documentation",
            content="# Test Document\n\nThis is a test document created by the API.",
            file_path="test/api-test.md",
            category="testing",
            tags=["test", "api", "documentation"]
        )
        
        print(f"✅ Created documentation file: {doc.id}")
        print(f"   Title: {doc.title}")
        print(f"   Category: {doc.category}")
        print(f"   File Path: {doc.file_path}")
        print(f"   Generated by agent: {doc.generated_by_agent}")
        
        # Test 2: Retrieve the documentation file
        print("\n📖 Test 2: Retrieving documentation file...")
        
        retrieved_doc = doc_service.get_documentation_file_by_id(doc.id, test_user.id)
        
        if retrieved_doc:
            print(f"✅ Retrieved documentation file: {retrieved_doc.id}")
            print(f"   Title: {retrieved_doc.title}")
            print(f"   Content length: {len(retrieved_doc.content)} chars")
            print(f"   Version: {retrieved_doc.version_number}")
        else:
            print("❌ Failed to retrieve documentation file")
            return False
        
        # Test 3: Update the documentation file
        print("\n✏️ Test 3: Updating documentation file...")
        
        updated_doc = doc_service.update_documentation_file(
            user_id=test_user.id,
            document_id=doc.id,
            title="Updated Test Documentation",
            content="# Updated Test Document\n\nThis document has been updated.\n\n## New Section\n\nAdded new content here.",
            change_summary="Added new section and updated content",
            tags=["test", "api", "documentation", "updated"]
        )
        
        if updated_doc:
            print(f"✅ Updated documentation file: {updated_doc.id}")
            print(f"   New title: {updated_doc.title}")
            print(f"   Content length: {len(updated_doc.content)} chars")
            print(f"   Version: {updated_doc.version_number}")
        else:
            print("❌ Failed to update documentation file")
            return False
          # Test 4: List documentation files
        print("\n📋 Test 4: Listing documentation files...")
        
        docs_result = doc_service.list_documentation_files(
            user_id=test_user.id,
            limit=10
        )
        
        print("✅ Listed documentation files:")
        print(f"   Total: {docs_result['total']}")
        print(f"   Returned: {len(docs_result['documents'])}")
        
        for i, doc_item in enumerate(docs_result['documents'][:3]):  # Show first 3
            print(f"   {i+1}. {doc_item.title} ({doc_item.category})")
        
        # Test 5: Search functionality
        print("\n🔍 Test 5: Testing search functionality...")
        
        search_results = doc_service.list_documentation_files(
            user_id=test_user.id,
            search_query="test",
            limit=5
        )
        
        print("✅ Search completed:")
        print(f"   Results: {len(search_results['documents'])}")
        
        for i, doc_item in enumerate(search_results['documents']):
            print(f"   {i+1}. {doc_item.title} (matches 'test')")
        
        # Test 6: Create agent-generated document
        print("\n🤖 Test 6: Creating agent-generated document...")
        
        agent_doc = doc_service.create_documentation_file(
            user_id=test_user.id,
            title="AI Generated Documentation",
            content="# AI Generated Document\n\nThis document was created by an AI agent.\n\n## Features\n\n- Automatic generation\n- User association\n- Version tracking",
            file_path="ai/generated-doc.md",
            category="ai-generated",
            research_session_id=f"session_{uuid.uuid4()}",
            agent_workflow_id=f"workflow_{uuid.uuid4()}",
            tags=["ai", "generated", "automatic"]
        )
        
        print(f"✅ Created AI-generated document: {agent_doc.id}")
        print(f"   Title: {agent_doc.title}")
        print(f"   Generated by agent: {agent_doc.generated_by_agent}")
        print(f"   Research session: {agent_doc.research_session_id}")
        
        print("\n🎉 All tests passed successfully!")
        print("=" * 50)
        print("✅ Documentation API endpoints are working correctly")
        print("✅ User authentication and authorization working")
        print("✅ Database persistence working")
        print("✅ Version tracking working")
        print("✅ Search functionality working")
        print("✅ Agent integration working")
        
        return True
        
    except Exception as e:
        print(f"\n❌ Test failed with error: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    # Run the test
    success = asyncio.run(test_documentation_endpoints())
    
    if success:
        print("\n🚀 Ready to proceed with frontend integration!")
        sys.exit(0)
    else:
        print("\n💥 Tests failed - need to fix issues before proceeding")
        sys.exit(1)
