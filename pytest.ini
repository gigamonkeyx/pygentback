[pytest]
minversion = 6.0
addopts = -v --tb=short --asyncio-mode=auto --timeout=300 --maxfail=5
testpaths = tests
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function
# UTF-8 Configuration - Observer Critical Fix
env =
    PYTHONIOENCODING = utf-8
    LANG = en_US.UTF-8
    LC_ALL = en_US.UTF-8
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
markers =
    slow: marks tests as slow
    fast: marks tests as fast
    unit: marks tests as unit tests
    integration: marks tests as integration tests
    nlp: marks tests as NLP tests
    multiagent: marks tests as multi-agent tests
    predictive: marks tests as predictive tests
    performance: marks tests as performance tests
    e2e: marks tests as end-to-end tests
    recipe_parser: marks tests as recipe parser tests
    agent_coordination: marks tests as agent coordination tests
    workflow_orchestration: marks tests as workflow orchestration tests
    prediction_models: marks tests as prediction model tests
    optimization_algorithms: marks tests as optimization algorithm tests
    requires_gpu: marks tests requiring GPU
    requires_network: marks tests requiring network access
    requires_external_service: marks tests requiring external services
    ui: marks tests as UI tests
    playwright: marks tests as Playwright tests
    auth: marks tests as authentication tests
    navigation: marks tests as navigation tests
    responsive: marks tests as responsive design tests

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
