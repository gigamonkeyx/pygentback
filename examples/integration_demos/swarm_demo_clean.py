"""
Agent Swarm Proof of Concept - Self-Code-Writing Collective

This demonstrates agents that can write new code to solve problems.
"""

import asyncio
from typing import List, Dict


class CodeWritingAgent:
    """An agent that can analyze problems and write code to solve them."""
    
    def __init__(self, agent_id: str, specialty: str):
        self.agent_id = agent_id
        self.specialty = specialty
        self.generated_files = {}
    
    async def analyze_problem(self, problem: str) -> List[str]:
        """Analyze what code needs to be written."""
        needs = []
        
        if "csv" in problem.lower() or "data" in problem.lower():
            needs.append("data_reader")
        if "dashboard" in problem.lower() or "web" in problem.lower():
            needs.append("web_interface")
        if "analyze" in problem.lower() or "trend" in problem.lower():
            needs.append("analyzer")
            
        return needs
    
    async def write_code(self, need: str, context: str) -> str:
        """Generate code for a specific need."""
        
        if need == "data_reader":
            return '''
import pandas as pd

class DataReader:
    def read_csv(self, filename):
        return pd.read_csv(filename)
    
    def get_info(self, df):
        return {
            "rows": len(df),
            "columns": list(df.columns),
            "types": str(df.dtypes.to_dict())
        }
'''
        
        elif need == "analyzer":
            return '''
class DataAnalyzer:
    def find_trends(self, df):
        trends = []
        for col in df.select_dtypes(include="number").columns:
            if len(df) > 1:
                if df[col].iloc[-1] > df[col].iloc[0]:
                    trends.append(f"{col} is increasing")
                else:
                    trends.append(f"{col} is decreasing")
        return trends
    
    def get_stats(self, df):
        return df.describe().to_dict()
'''
        
        elif need == "web_interface":
            return '''
from flask import Flask, jsonify

app = Flask(__name__)

@app.route("/")
def home():
    return """
    <h1>Agent-Generated Dashboard</h1>
    <p>This interface was created by AI agents!</p>
    <button onclick="loadData()">Load Data</button>
    <div id="results"></div>
    
    <script>
    function loadData() {
        fetch('/api/data')
            .then(r => r.json())
            .then(data => {
                document.getElementById('results').innerHTML = 
                    '<pre>' + JSON.stringify(data, null, 2) + '</pre>';
            });
    }
    </script>
    """

@app.route("/api/data")
def api_data():
    return jsonify({
        "message": "Data processed by AI-generated code",
        "trends": ["Sales increasing", "Customer satisfaction improving"],
        "status": "Generated by agent swarm"
    })

if __name__ == "__main__":
    app.run(port=5000)
'''
        
        else:
            return f'# Code for {need}\\nprint("Generated by agent: {self.agent_id}")'


class AgentSwarm:
    """Coordinates multiple agents to solve complex problems."""
    
    def __init__(self):
        self.agents = []
        self.solutions = {}
    
    def add_agent(self, agent: CodeWritingAgent):
        self.agents.append(agent)
    
    async def solve_problem(self, problem: str) -> Dict[str, str]:
        """Main entry: Give swarm a problem, get working code back."""
        
        print(f"🎯 Problem: {problem}")
        print("🤖 Swarm analyzing...")
        
        all_solutions = {}
        
        for agent in self.agents:
            print(f"   🔍 {agent.agent_id} analyzing...")
            
            # Each agent analyzes what's needed
            needs = await agent.analyze_problem(problem)
            
            for need in needs:
                if need not in all_solutions:  # Don't duplicate work
                    print(f"   📝 {agent.agent_id} writing code for {need}...")
                    code = await agent.write_code(need, problem)
                    all_solutions[f"{need}.py"] = code
        
        print(f"✅ Generated {len(all_solutions)} code files!")
        return all_solutions


async def demonstrate_swarm():
    """Show the swarm in action."""
    
    print("🧠 Agent Swarm Demonstration")
    print("=" * 40)
    print("Vision: Agents write code to solve problems!")
    print()
    
    # Create swarm with specialized agents
    swarm = AgentSwarm()
    swarm.add_agent(CodeWritingAgent("data_specialist", "data_processing"))
    swarm.add_agent(CodeWritingAgent("web_developer", "web_interfaces"))
    swarm.add_agent(CodeWritingAgent("analyst", "data_analysis"))
    
    # Give the swarm a complex problem
    problem = "I need to analyze sales data from CSV files and create a web dashboard to show trends"
    
    solutions = await swarm.solve_problem(problem)
    
    print("\\n📁 Generated Files:")
    for filename, code in solutions.items():
        print(f"\\n📄 {filename}:")
        print("   " + "\\n   ".join(code.strip().split("\\n")[:5]) + "...")
    
    print(f"\\n🎉 Success! Generated {len(solutions)} working code files.")
    print("\\n💡 What just happened:")
    print("   • Agents analyzed the problem")
    print("   • Identified missing capabilities")
    print("   • Wrote code to fill the gaps")
    print("   • Created a complete solution")
    
    print("\\n🚀 Next time:")
    print("   • Agents will reuse existing code")
    print("   • Only write what's truly missing")
    print("   • Build more complex solutions")
    
    return solutions


# Example of writing generated code to files
async def save_generated_code(solutions: Dict[str, str]):
    """Save the generated code to actual files."""
    
    import os
    output_dir = "generated_by_swarm"
    
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    for filename, code in solutions.items():
        filepath = os.path.join(output_dir, filename)
        with open(filepath, 'w') as f:
            f.write(code)
        print(f"💾 Saved: {filepath}")


if __name__ == "__main__":
    print("🚀 Starting Agent Swarm Demo...")
    
    # Run the demonstration
    solutions = asyncio.run(demonstrate_swarm())
    
    # Optionally save the generated code
    print("\\n💾 Saving generated code...")
    asyncio.run(save_generated_code(solutions))
    
    print("\\n✨ Demo complete! Check the 'generated_by_swarm' folder.")
