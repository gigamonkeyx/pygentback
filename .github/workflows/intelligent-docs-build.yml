name: Intelligent Documentation Build

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'src/docs/**'
      - '**/*.md'
      - '**/*.mmd'
      - 'package.json'
      - '.github/workflows/intelligent-docs-build.yml'
  
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/docs/**'
      - '**/*.md'
      - '**/*.mmd'
  
  release:
    types: [published]
  
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild'
        required: false
        default: 'false'
        type: boolean
      production_build:
        description: 'Production build'
        required: false
        default: 'true'
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  check-triggers:
    name: Check Build Triggers
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.trigger-check.outputs.should_build }}
      trigger_reasons: ${{ steps.trigger-check.outputs.trigger_reasons }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for trigger detection
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Check build triggers
      id: trigger-check
      run: |
        python -c "
        import asyncio
        import sys
        import os
        sys.path.append('src')
        
        from orchestration.build_trigger_detector import BuildTriggerDetector
        
        async def check():
            detector = BuildTriggerDetector()
            status = await detector.check_all_triggers()
            
            should_build = status['should_build'] or '${{ github.event.inputs.force_rebuild }}' == 'true'
            reasons = ', '.join(status['summary']['trigger_reasons'])
            
            print(f'should_build={should_build}')
            print(f'trigger_reasons={reasons}')
            
            # Set GitHub outputs
            with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                f.write(f'should_build={should_build}\n')
                f.write(f'trigger_reasons={reasons}\n')
        
        asyncio.run(check())
        "

  build-documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: check-triggers
    if: needs.check-triggers.outputs.should_build == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/docs/package-lock.json'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      working-directory: src/docs
      run: |
        npm ci
    
    - name: Install Mermaid CLI
      run: |
        npm install -g @mermaid-js/mermaid-cli
    
    - name: Cache Mermaid diagrams
      uses: actions/cache@v3
      with:
        path: src/docs/public/diagrams
        key: mermaid-cache-${{ hashFiles('src/docs/**/*.mmd', 'src/docs/**/*.md') }}
        restore-keys: |
          mermaid-cache-
    
    - name: Execute intelligent documentation build
      run: |
        python -c "
        import asyncio
        import sys
        import os
        sys.path.append('src')
        
        from orchestration.intelligent_docs_builder import IntelligentDocsBuilder
        
        async def build():
            builder = IntelligentDocsBuilder()
            
            force = '${{ github.event.inputs.force_rebuild }}' == 'true'
            production = '${{ github.event.inputs.production_build }}' != 'false'
            
            print(f'Starting intelligent build (force={force}, production={production})')
            
            result = await builder.execute_intelligent_build(
                force=force,
                production=production
            )
            
            if result['success']:
                print('✅ Documentation build successful')
                print(f'Duration: {result[\"total_duration_seconds\"]:.1f}s')
                if 'build_results' in result:
                    br = result['build_results']
                    print(f'Files generated: {br.get(\"files_generated\", 0)}')
                    print(f'Output size: {br.get(\"output_size_mb\", 0):.1f} MB')
            else:
                print('❌ Documentation build failed')
                print(f'Error: {result.get(\"error\", \"Unknown error\")}')
                sys.exit(1)
        
        asyncio.run(build())
        "
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: documentation-build
        path: |
          src/docs/.vitepress/dist/
          src/docs/public/diagrams/
        retention-days: 30
    
    - name: Upload Mermaid cache
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: mermaid-cache
        path: src/docs/public/diagrams/
        retention-days: 7

  deploy-documentation:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [check-triggers, build-documentation]
    if: |
      needs.build-documentation.result == 'success' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation-build
        path: dist/
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.event_name != 'pull_request'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: dist/
        cname: docs.pygent.ai  # Optional: custom domain
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "🚀 Documentation deployed successfully!"
        echo "📖 Available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"

  notify-results:
    name: Notify Build Results
    runs-on: ubuntu-latest
    needs: [check-triggers, build-documentation, deploy-documentation]
    if: always()
    
    steps:
    - name: Build summary
      run: |
        echo "## 📚 Documentation Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.check-triggers.outputs.should_build }}" == "true" ]; then
          echo "✅ **Build Triggered**: ${{ needs.check-triggers.outputs.trigger_reasons }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-documentation.result }}" == "success" ]; then
            echo "✅ **Build Status**: Successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-documentation.result }}" == "success" ]; then
            echo "🚀 **Deployment**: Successful" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-documentation.result }}" == "skipped" ]; then
            echo "⏭️ **Deployment**: Skipped (not main branch)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⏭️ **Build Status**: Skipped (no triggers detected)" >> $GITHUB_STEP_SUMMARY
        fi
