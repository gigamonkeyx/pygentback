"""
Artifact Implementation

Implements the Artifact specification from Google A2A Protocol.
Artifacts represent tangible outputs generated by agents during task processing.
"""

import uuid
from datetime import datetime, timezone
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, field

from .message import Part, part_from_dict


@dataclass
class Artifact:
    """
    Artifact - tangible output generated by an agent
    
    Artifacts are composed of one or more parts and represent
    the results of task processing (documents, images, data, etc.)
    """
    
    # Required fields
    artifact_id: str
    parts: List[Part] = field(default_factory=list)
    
    # Optional fields
    name: Optional[str] = None
    description: Optional[str] = None
    mime_type: Optional[str] = None
    
    # Metadata
    metadata: Dict[str, Any] = field(default_factory=dict)
    created_at: datetime = field(default_factory=lambda: datetime.now(timezone.utc))
    updated_at: datetime = field(default_factory=lambda: datetime.now(timezone.utc))
    
    def __post_init__(self):
        """Initialize artifact with unique ID if not provided"""
        if not self.artifact_id:
            self.artifact_id = str(uuid.uuid4())
    
    def add_part(self, part: Part) -> None:
        """Add a part to the artifact"""
        self.parts.append(part)
        self.updated_at = datetime.now(timezone.utc)
    
    def add_text(self, text: str, metadata: Optional[Dict[str, Any]] = None) -> None:
        """Add text content to the artifact"""
        from .message import TextPart
        part = TextPart(text=text, metadata=metadata or {})
        self.add_part(part)
    
    def add_file_bytes(self, content: bytes, mime_type: str, name: Optional[str] = None,
                      metadata: Optional[Dict[str, Any]] = None) -> None:
        """Add file content with inline bytes"""
        from .message import FilePart
        part = FilePart(metadata=metadata or {})
        part.set_file_content(content, mime_type, name)
        self.add_part(part)
    
    def add_file_uri(self, uri: str, mime_type: str, name: Optional[str] = None,
                    metadata: Optional[Dict[str, Any]] = None) -> None:
        """Add file content with URI reference"""
        from .message import FilePart
        part = FilePart(metadata=metadata or {})
        part.set_file_uri(uri, mime_type, name)
        self.add_part(part)
    
    def add_data(self, data: Any, metadata: Optional[Dict[str, Any]] = None) -> None:
        """Add structured data content"""
        from .message import DataPart
        part = DataPart(data=data, metadata=metadata or {})
        self.add_part(part)
    
    def get_text_content(self) -> str:
        """Get all text content concatenated"""
        from .message import TextPart
        text_parts = [part.text for part in self.parts if isinstance(part, TextPart)]
        return "\n".join(text_parts)
    
    def get_file_parts(self) -> List[Part]:
        """Get all file parts"""
        from .message import FilePart
        return [part for part in self.parts if isinstance(part, FilePart)]
    
    def get_data_parts(self) -> List[Part]:
        """Get all data parts"""
        from .message import DataPart
        return [part for part in self.parts if isinstance(part, DataPart)]
    
    def clear_parts(self) -> None:
        """Clear all parts from the artifact"""
        self.parts.clear()
        self.updated_at = datetime.now(timezone.utc)
    
    def append_text(self, text: str) -> None:
        """Append text to the last text part, or create new one"""
        from .message import TextPart
        
        # Find the last text part
        last_text_part = None
        for part in reversed(self.parts):
            if isinstance(part, TextPart):
                last_text_part = part
                break
        
        if last_text_part:
            last_text_part.text += text
        else:
            self.add_text(text)
        
        self.updated_at = datetime.now(timezone.utc)
    
    def set_name(self, name: str) -> None:
        """Set artifact name"""
        self.name = name
        self.updated_at = datetime.now(timezone.utc)
    
    def set_description(self, description: str) -> None:
        """Set artifact description"""
        self.description = description
        self.updated_at = datetime.now(timezone.utc)
    
    def set_mime_type(self, mime_type: str) -> None:
        """Set artifact MIME type"""
        self.mime_type = mime_type
        self.updated_at = datetime.now(timezone.utc)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization"""
        result = {
            "artifactId": self.artifact_id,
            "parts": [part.to_dict() for part in self.parts]
        }
        
        if self.name:
            result["name"] = self.name
        if self.description:
            result["description"] = self.description
        if self.mime_type:
            result["mimeType"] = self.mime_type
        if self.metadata:
            result["metadata"] = self.metadata
        
        return result
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "Artifact":
        """Create Artifact from dictionary"""
        # Parse parts
        parts = []
        if "parts" in data:
            parts = [part_from_dict(part_data) for part_data in data["parts"]]
        
        return cls(
            artifact_id=data["artifactId"],
            parts=parts,
            name=data.get("name"),
            description=data.get("description"),
            mime_type=data.get("mimeType"),
            metadata=data.get("metadata", {})
        )
    
    @classmethod
    def create_text_artifact(cls, text: str, name: Optional[str] = None,
                            description: Optional[str] = None) -> "Artifact":
        """Create an artifact with text content"""
        artifact = cls(
            artifact_id=str(uuid.uuid4()),
            name=name,
            description=description,
            mime_type="text/plain"
        )
        artifact.add_text(text)
        return artifact
    
    @classmethod
    def create_file_artifact(cls, content: bytes, mime_type: str, 
                            name: Optional[str] = None,
                            description: Optional[str] = None) -> "Artifact":
        """Create an artifact with file content"""
        artifact = cls(
            artifact_id=str(uuid.uuid4()),
            name=name,
            description=description,
            mime_type=mime_type
        )
        artifact.add_file_bytes(content, mime_type, name)
        return artifact
    
    @classmethod
    def create_data_artifact(cls, data: Any, name: Optional[str] = None,
                            description: Optional[str] = None) -> "Artifact":
        """Create an artifact with structured data"""
        artifact = cls(
            artifact_id=str(uuid.uuid4()),
            name=name,
            description=description,
            mime_type="application/json"
        )
        artifact.add_data(data)
        return artifact


class ArtifactManager:
    """Artifact management utility for A2A servers"""
    
    def __init__(self):
        self.artifacts: Dict[str, Artifact] = {}
    
    def create_artifact(self, name: Optional[str] = None,
                       description: Optional[str] = None,
                       mime_type: Optional[str] = None) -> Artifact:
        """Create a new artifact"""
        artifact = Artifact(
            artifact_id=str(uuid.uuid4()),
            name=name,
            description=description,
            mime_type=mime_type
        )
        self.artifacts[artifact.artifact_id] = artifact
        return artifact
    
    def get_artifact(self, artifact_id: str) -> Optional[Artifact]:
        """Get artifact by ID"""
        return self.artifacts.get(artifact_id)
    
    def update_artifact(self, artifact: Artifact) -> None:
        """Update an existing artifact"""
        self.artifacts[artifact.artifact_id] = artifact
    
    def delete_artifact(self, artifact_id: str) -> bool:
        """Delete an artifact"""
        if artifact_id in self.artifacts:
            del self.artifacts[artifact_id]
            return True
        return False
    
    def list_artifacts(self) -> List[Artifact]:
        """List all artifacts"""
        return list(self.artifacts.values())
    
    def cleanup_old_artifacts(self, max_age_hours: int = 24) -> int:
        """Clean up old artifacts"""
        cutoff = datetime.now(timezone.utc).timestamp() - (max_age_hours * 3600)
        removed_count = 0
        
        for artifact_id in list(self.artifacts.keys()):
            artifact = self.artifacts[artifact_id]
            if artifact.created_at.timestamp() < cutoff:
                del self.artifacts[artifact_id]
                removed_count += 1
        
        return removed_count
